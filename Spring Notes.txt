1. What is Inversion of control (IOC) and Dependancy Injection?
-> Inversion of control is used to make the code loosely coupled. Which means rather creating the objects or generating the values into the code itself we provide the value externally, which is also called as dependancy injection. See the following code snippet.
	
	Before IOC and DI :
	class Employee {
		Address address;
		Employee() {
			this.address = new Address();
		}
	}
	
	After IOC and DI :
	
	class Employee {
		Address address;
		Employee(Address address) {
			this.address = address;
		}
	}
	
===========================================================================================================================================================

2. What is Dependancy Injection?
-> In dependacny injection the values to the variables are provided externally i.e. from a configuration file or a schema object (in case of ORM). The file from which the values is also called as configuration file.

===========================================================================================================================================================

3. What are advantages of Dependancy Injection?
-> 1. Code becomes lossely coupled.
   2. Code is easy to test and maintain.

===========================================================================================================================================================

4. What are the Advantages of spring framework?
->  1. Predefined Templates.
	2. Loose coupling.
	3. Easy to test.
	4. Lightweight.
	5. Fast Development.
	6. Powerful abstraction.
	7. Declarative support.
	
===========================================================================================================================================================

5. What is IOC container?
-> IOC container is responsible to instantiate, configure and assemble the objects. IOC works on the basis of configuration file.

============================================================================================================================================================

6. What are the main functions of IOC container?
->  1. Instantiate application class.
	2. configure objects.
	3. identify the dependacny between the objects.

===========================================================================================================================================================

7. What are the type of IOC containers?
->  1. Bean Factory.
	2. Application context.
	
	Both the IOC containers do the same work. But Application context IOC is build on the top of Bean Factory. Application Context has it's own benefits over Bean factory such as support for web applications.
	
	Example of Bean Factory : 
	Resource resource=new ClassPathResource("applicationContext.xml");  
	BeanFactory factory=new XmlBeanFactory(resource);
	
	Example of Application Context : 
	ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
	
============================================================================================================================================================

8. What is Dependancy lookup?
-> Here we get the resource after we demand. But the problem with DL is : it is tightly coupled and hard to test and maintain.

============================================================================================================================================================

9. What are the type Dependancy Injection?
->  1. By Constructor.
	2. By Setter method.
	
============================================================================================================================================================

10. What is the default data type of a value when passed through <constructor-arg> tag, if the data type is not secified explicitly?
-> Spring.

============================================================================================================================================================

11. What can be injected via xml configuration file?
-> primitive data types, String, other beans.

============================================================================================================================================================

12. What is the difference between Constructor injection and Setter injection?
->  1. Setter injection can be used to do partial values injection whereas constructor injection can be only used for absolute injection.
	2. Setter injection overrides constructor injection. IOC selects setter over constructor.
	
============================================================================================================================================================

13. What is autowiring in spring?
-> autowiring is used to inject onject dependancy in spring. it internally uses setter or constructor injection.

============================================================================================================================================================

14. Does autowiring in spring support String and primitive data types OR can String and primitive data types be autowired?
-> No.

============================================================================================================================================================

15. What are the modes of autowiring?
->  1. byName : the bean name and the property name should be same.
	2. byType : the bean type and the property type should be same.
	3. constructor : by calling the constructor of the class. constructor with largest number of parameter is called.

============================================================================================================================================================

16. what are different bean scopes?
->  1. singleton
	2. prototype
	3. request
	4. session
	5. global-session

============================================================================================================================================================

17. what is the default scope of the bean?
-> singleton.

============================================================================================================================================================

18. when to use prototype and singleton scope for bean?
-> singleton scope is used when the bean is stateless and prototype is used when bean is statefull.

============================================================================================================================================================

19. What are the Interfaces used for doing initialising and disposing work in bean lifecycle.
->  1. InitilizingBean
	2. DisposableBean
	
============================================================================================================================================================

20. What are the XML tags for doing initialising and disposing work in bean lifecycle.
-> init-method, destroy-method

============================================================================================================================================================

21. What are the XML tags for doing initialising and disposing work for a bean globally.
-> default-init-method, default-destroy-method

============================================================================================================================================================

22. Which injection is done first? annotation based or XML based?
-> annotation.

============================================================================================================================================================

23. Are annotations enabled by default in spring?
-> No. To enable annotations one need to specify explicitly by declaring a line in config xml (<context:annotation-config/>)

============================================================================================================================================================

24. what is @Required used for?
-> It specifies that the value for the property is must, and should be populated via configuration file.

============================================================================================================================================================

25. What is @Autowired used for?
-> @Autowired annotation is used to autowire the bean or dependancy easily. It can be used with setter method or a bean property.

============================================================================================================================================================

26. What is the default autowire type used by @Autowired annotation?
-> byType.

============================================================================================================================================================

27. What is the default behaviour of @Autowired annotation?
-> @Autowired annotation by default makes the property in the bean required. We can set it false by using (required=false) after @Autowired annotation.

===========================================================================================================================================================

28. What is @Qualifier used for?
-> It is used for specifying a bean by name. It is used as @Qualifier("<bean-name>").

===========================================================================================================================================================

29. What if two beans are defined in configuration file with same type and different name and the property in other bean is specified as autowired, which bean from config file will be picked up?
-> Here the autowiring will be done "byName". And if the name is also not same in config and java file then error will occur.

===========================================================================================================================================================

30. What is @Configuration and @Bean used for?
-> Annotating a class with the @Configuration indicates that the class can be used by the Spring IoC container as a source of bean definitions. The @Bean annotation tells Spring that a method annotated with @Bean will return an object that should be registered as a bean in the Spring application context.

============================================================================================================================================================ 

31. What if the @Configuration is not specified and @Bean is specified?
-> It works.

============================================================================================================================================================

32. What if the @Bean is not specified and @Bean is specified?
-> It does not works.

============================================================================================================================================================

33. What is event handling in spring?
-> Application Context generates several event which can be used for various purposes. Following are the event:
	1. ContextRefreshedEvent
	2. ContextStartedEvent
	3. ContextStoppedEvent
	4. ContextClosedEvent
	5. RequestHandledEvent

============================================================================================================================================================

34. What Interface does bean has to implement to listed to context event?
-> ApplicationListener. ApplicationListener has only one method onApplicationEvent().

============================================================================================================================================================

35. What is Asepect oriented Programming (AOP)?
-> AOP is to separate out the common logic from the main buisness logic. The program is sliced into various components called as concerns. AOP can be used for logging, auditing etc.

============================================================================================================================================================

36. What is Aspect?
-> Aspect can be called as Module which provides certain APIs or functionality which can be used in program. Logging can be called as an aspect which can be used by spring AOP for logging.

============================================================================================================================================================

37. What is Join Point?
-> Join point can be a place where the aspect can be plugged in into the code. for example, logging aspect can be placed at the start and end of the function.

============================================================================================================================================================

38. What is Advice?
-> This is the actual action to be taken before or after the method execution. This is the actual code which is invoked by Spring AOP.

============================================================================================================================================================

39. What is Pointcut?
-> It is a set of Join points where an Advice is expected to be executed.

============================================================================================================================================================

40. What is Introduction?
-> Introduction allows you to add new methods and attributed to the existing class.

============================================================================================================================================================

41. What is Target Object?
-> Target object is the object where one or mode aspects are adviced. This is a proxy object often being called as advised object.

============================================================================================================================================================

42. What is Weaving?
-> Weaving is the process of linking aspects to other applications or objects to create new advised object. Can be done at compile time, load time or runnig time.

============================================================================================================================================================

43. What are the type of Advices in AOP?
->  1. before - executes before method execution.
	2. after - executes after methhod execution.
	3. after-returning - executes if the method executes successfully.
	4. after-throwing - executes only if methdo exits by throwing execption.
	5. around - before and after the method execution.
	
============================================================================================================================================================

44. When does the Advice executes?
-> If we will create any bean using new operator the advices will not be applied. Only when we will use ApplicationContext to get the bean, advices will be applied. 

45. What is the use of @PointCut annotation?
-> A method annotated with @Pointcut annotation can directly be used in the place of any expression in other advices (method annotations).

46. How to get method signature or method arguments in Advice method?
-> We can use JoinPoint as parameter in the advice methods and using it get the method signature or the target object.

47. What is "within" used for in pointcut expressions?
-> We can use within in pointcut expression to apply advice to all the methods in the class.

48. What is the lifecycle of Spring MVC?
->  1. Dispatcher Servlet
	2. Handler Mapping
	3. Controller.
	4. View Resolver.
	5. View.

49. What is @Controller used for?
-> @Controller annotation marks this class as spring bean which may handle different HTTP requests based on mapping specified on class or individual controller methods.

50. What is @RequestMapping used for?
-> @RequestMapping annotation is used for mapping web requests onto specific handler classes and/or handler methods.

51. What is you don't specify HTTP method in @requestMapping?
-> The same method will serve all type of Http methods.

52. What is ModelMap?
-> ModelMap is a Map implementation, which saves you from old request.getAttribute/ request.setAttribute. It provides a way to set/get attributes from/to request or session.

53. Why is <mvc:annotation-driven /> used for?
-> This is used to inform the application that please check for annotations.

54. why is  <context:component-scan base-package="com.sushank.spring" /> used?
-> it informs the application that please look for all the annotated classes in the specified package.

55. What is @Configuration used for?
-> @Configuration indicates that this class contains one or more bean methods annotated with @Bean producing bean manageable by spring container.

56. What is @EnableMVC used for?
-> @EnableWebMvc is equivalent to mvc:annotation-driven in XML. It enables support for @Controller-annotated classes that use @RequestMapping to map incoming requests to specific method.

57. What is @ComponentScan used for?
-> @ComponentScan is equivalent to context:component-scan base-package="..." providing with where to look for spring managed beans/classes.

58. 
	


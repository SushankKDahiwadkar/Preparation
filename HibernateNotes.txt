1. What is Hibernate Framework?
-> Hibernate framework simplifies the development of java application to interact with the database. Hibernate is an open source, lightweight, ORM (Object Relational Mapping) tool.

2. What are the advantages of hibernate?
->  1. Opensource and Ligehtweight.
	2. Fast Performance due to internal Caching.
	3. Database Independant query.
	4. Automatic table creation.
	5. Simplifies complex joins
	6. Provides query statistics and database status.
	
3. What is Session Factory?
-> Session factory provides Session Objects. It is client of ConnectionProvider. It holds second level cache of data. It is an interface which provides object of session.

4. What is Session?
-> It provides the interface between application and database. It is factory of Transaction, Query and Criteria. It holds first level cache. The org.hibernate.Session interface provides methods to insert, update and delete the object. It also provides factory methods for Transaction, Query and Criteria.

5. What is Transaction?
-> The transaction object specifies the atomic unit of work. It is optional. The org.hibernate.Transaction interface provides methods for transaction management.

6. What is ConnectionProvider?
-> It is a factory of JDBC connections. It abstracts the application from DriverManager or DataSource. It is optional.

7. What is TransactionFactory?
-> It is a factory of Transaction. It is optional.

8. What are the normal steps for a hibernate program to run?
->  1. Create Configuration Object.
	2. configure Configuration object with configuration file. (hibernate.cfg.xml)
	3. Create SessionFactory object and initialise it with cfg.buildSessionFactory();
	4. Create Session object and initialize it with sessionFactory.openSession();
	5. Create TransactionObject and initialize it with session.beginTransaction();
	6. Create and initialise the bean object.
	7. call persist method on session object session.persist(employee);
	8. call commit method on transaction object transaction.commit();
	9. close the session object session.close();

9. What is the main advantage of using annotation over xml in hibernate?
-> The core advantage of using hibernate annotation is that you don't need to create mapping (hbm) file. Here, hibernate annotations are used to provide the 	meta data.

10. What is Generator Class in hibernate?
-> The <generator> subelement of id used to generate the unique identifier for the objects of persistent class. There are many generator classes defined in the Hibernate Framework.
	Following are the types of generator classes : 
	1. assigned
	2. increment
	3. sequence
	4. hilo
	5. native
	6. identity
	7. seqhilo
	8. uuid
	9. guid
	10. select
	11. foreign
	12. sequence-identity

11. How many inheritance mapping strategies are defined in hibernate?
->  1. Table Per Hierarchy : A single table is used to store the entire hierarchy.
	2. Table Per Concrete class :  In case of table per concrete class, tables are created as per class. But duplicate column is added in subclass tables.
	3. Table Per Subclass : In this strategy, tables are created as per class but related by foreign key. So there are no duplicate columns.

12. How does Table per hierarchy works?
-> In case of table per class hierarchy an discriminator column is added by the hibernate framework that specifies the type of the record. It is mainly used to distinguish the record. To specify this, discriminator sub-element of class must be specified.
	- Specify <discriminator column="type" type="string"></discriminator> property into the main class
	- Add discriminator-value="reg_emp" property in class declaration.
	- @Inheritance(strategy=InheritanceType.SINGLE_TABLE), @DiscriminatorColumn and @DiscriminatorValue in annotations bases.

13. How does table per Concrete works?
-> In case of Table Per Concrete class, there will be three tables in the database having no relations to each other. But the relationship is maintained by union-subclass element.
	-  <union-subclass name="com.javatpoint.mypackage.Regular_Employee" table="regemp122"> property into the main class.
	- @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS) to the parent class.
	- @AttributeOverrides() to the child class.
	- Disadvantage : duplicate columns are created in child tables.

14. How does table per subclass works?
-> In case of Table Per Subclass, subclass mapped tables are related to parent class mapped table by primary key and foreign key relationship. The <joined-subclass> element of class is used to map the child class with parent using the primary key and foreign key relation. 
	- @Inheritance(strategy=InheritanceType.JOINED) in parent class.
	- @PrimaryKeyJoinColumn(name="ID") in child class.

15. How is list is mapped in persistence class?
-> In mapping file <list> element is provided. List accepts following properties : 
	- <key> : used to specify the foreign key to the parent class in child/ associated table.
	- <index> : list and map are indexed collections so this is element is necessary.
	- <element> : used to specify the column for storing collection's value if the collection is of string type.

16. What are type of collection elements? and how are mappings managed?
-> The <element> and <component-element> are used for normal value such as string, int etc. whereas <one-to-many> and <many-to-many> are used to map entity reference.

17. What collection types are supportd?
->  - <list>
	- <set>
	- <bag>
	- <map>

18. What is lazy collections?
-> in lazy collection child objects are fetched on demand. From hibernate 3.0 lazy collection is enabled by default. To set lazy loading true. "lazy" attribute is provided by collection.
	<list name="answers" lazy="true"> 
	
19. What is component mapping?
-> In component mapping, we will map the dependent object as a component. An component is an object that is stored as an value rather than entity reference. This is mainly used if the dependent object doesn't have primary key. It is used in case of composition (HAS-A relation), that is why it is termed as component.



1. What is Inversion of control (IOC) and Dependancy Injection?
-> Inversion of control is used to make the code loosely coupled. Which means rather creating the objects or generating the values into the code itself we provide the value externally, which is also called as dependancy injection. See the following code snippet.
	
	Before IOC and DI :
	class Employee {
		Address address;
		Employee() {
			this.address = new Address();
		}
	}
	
	After IOC and DI :
	
	class Employee {
		Address address;
		Employee(Address address) {
			this.address = address;
		}
	}
	
===========================================================================================================================================================

2. What is Dependancy Injection?
-> In dependacny injection the values to the variables are provided externally i.e. from a configuration file or a schema object (in case of ORM). The file from which the values is also called as configuration file.

===========================================================================================================================================================

3. What are advantages of Dependancy Injection?
-> 1. Code becomes lossely coupled.
   2. Code is easy to test and maintain.

===========================================================================================================================================================

4. What are the Advantages of spring framework?
->  1. Predefined Templates.
	2. Loose coupling.
	3. Easy to test.
	4. Lightweight.
	5. Fast Development.
	6. Powerful abstraction.
	7. Declarative support.
	
===========================================================================================================================================================

5. What is IOC container?
-> IOC container is responsible to instantiate, configure and assemble the objects. IOC works on the basis of configuration file.

============================================================================================================================================================

6. What are the main functions of IOC container?
->  1. Instantiate application class.
	2. configure objects.
	3. identify the dependacny between the objects.

===========================================================================================================================================================

7. What are the type of IOC containers?
->  1. Bean Factory.
	2. Application context.
	
	Both the IOC containers do the same work. But Application context IOC is build on the top of Bean Factory. Application Context has it's own benefits over Bean factory such as support for web applications.
	
	Example of Bean Factory : 
	Resource resource=new ClassPathResource("applicationContext.xml");  
	BeanFactory factory=new XmlBeanFactory(resource);
	
	Example of Application Context : 
	ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
	
============================================================================================================================================================

8. What is Dependancy lookup?
-> Here we get the resource after we demand. But the problem with DL is : it is tightly coupled and hard to test and maintain.

============================================================================================================================================================

9. What are the type Dependancy Injection?
->  1. By Constructor.
	2. By Setter method.
	
============================================================================================================================================================

10. What is the default data type of a value when passed through <constructor-arg> tag, if the data type is not secified explicitly?
-> Spring.

============================================================================================================================================================

11. What can be injected via xml configuration file?
-> primitive data types, String, other beans.

============================================================================================================================================================

12. What is the difference between Constructor injection and Setter injection?
->  1. Setter injection can be used to do partial values injection whereas constructor injection can be only used for absolute injection.
	2. Setter injection overrides constructor injection. IOC selects setter over constructor.
	
============================================================================================================================================================

13. What is autowiring in spring?
-> autowiring is used to inject onject dependancy in spring. it internally uses setter or constructor injection.

============================================================================================================================================================

14. Does autowiring in spring support String and primitive data types OR can String and primitive data types be autowired?
-> No.

============================================================================================================================================================

15. What are the modes of autowiring?
->  1. byName : the bean name and the property name should be same.
	2. byType : the bean type and the property type should be same.
	3. constructor : by calling the constructor of the class. constructor with largest number of parameter is called.

============================================================================================================================================================

16. what are different bean scopes?
->  1. singleton
	2. prototype
	3. request
	4. session
	5. global-session

============================================================================================================================================================

17. what is the default scope of the bean?
-> singleton.

============================================================================================================================================================

18. when to use prototype and singleton scope for bean?
-> singleton scope is used when the bean is stateless and prototype is used when bean is statefull.

============================================================================================================================================================

19. What are the Interfaces used for doing initialising and disposing work in bean lifecycle.
->  1. InitilizingBean
	2. DisposableBean
	
============================================================================================================================================================

20. What are the XML tags for doing initialising and disposing work in bean lifecycle.
-> init-method, destroy-method

============================================================================================================================================================

21. What are the XML tags for doing initialising and disposing work for a bean globally.
-> default-init-method, default-destroy-method